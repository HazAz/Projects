import java.util.*;
public class ConnectFour{
  public static void main(String[] args){
    play();
  }
  public static char[][] makeBoard(int n){
    char[][] board = new char[n][n];
    for(int i=0; i<n; i++){
      for(int j=0; j<n; j++){
        board[i][j]=' ';
      }
    }
    return board;
  }
  public static void displayBoard(char[][] array){
    for(int i=0; i<array.length; i++){
      System.out.print(" "+i);
    }
    System.out.println();
    int counter = 0;
    for(int i=0; i<array.length*2+1;i++){
      int counter2 = 0;
      for(int j=0; j<array.length*2+1;j++){
        if(i%2==0) System.out.print("=");
        else if(i%2==1 && j%2==0) System.out.print("|");               
        else System.out.print(array[counter][counter2]);
        if(j%2 ==1) counter2++;
      }
      if(i%2 ==1) counter++;            
      System.out.println();     
    }
  }
  
  public static void writeOnBoard(char[][] board, char c, int x){
    if(x >= board.length || x<0) throw new IllegalArgumentException("ERROR: This value does not represent a column on the board!");                                
    if(board[0][x] != ' ') throw new IllegalArgumentException("ERROR:This column is full");
    for(int i=board.length-1; i>-1; i--){
      if(board[i][x] == ' '){
        board[i][x] = c;
        break;
      }
    }
  }
  
  
  public static void getUserMove(char[][] board, int userNumber){
    int x;
    Scanner read = new Scanner(System.in);
    System.out.print("Which column would you like to input your pin?");
    x = read.nextInt();
    
    while(x >= board.length || x<0 || board[0][x]!=' '){
      System.out.print("Please enter a new number!");
      read = new Scanner(System.in);
      x = read.nextInt();                                            
    }
    if(userNumber==1) writeOnBoard(board,'x',x);
    else writeOnBoard(board, 'o', x);
  }
  
  public static char checkForWinner(char[][] board){
    //columns
    for(int i=board.length-1; i>2; i--){
      for(int j=0; j<board.length; j++){
        if(board[i][j]=='x' && board[i-1][j]=='x' && board[i-2][j]=='x' && board[i-3][j]=='x') return 'x';
        if(board[i][j]=='o' && board[i-1][j]=='o' && board[i-2][j]=='o' && board[i-3][j]=='o') return 'o';
      }
    }
    //rows
    for(int i=0; i<board.length; i++){
      for(int j=board.length-1; j>2; j--){
        if(board[i][j]=='x' && board[i][j-1]=='x' && board[i][j-2]=='x' && board[i][j-3]=='x') return 'x';
        if(board[i][j]=='o' && board[i][j-1]=='o' && board[i][j-2]=='o' && board[i][j-3]=='o') return 'o';
      }
    }
    //anti diagonal 
    for(int i=board.length-1; i>2; i--){
      for(int j=board.length-1; j>2; j--){
        if(board[i][j]=='x' && board[i-1][j-1]=='x' && board[i-2][j-2]=='x' && board[i-3][j-3]=='x') return 'x';
        if(board[i][j]=='o' && board[i-1][j-1]=='o' && board[i-2][j-2]=='o' && board[i-3][j-3]=='o') return 'o';
      } 
    }
    
    //diagonal 
    if(board[0][3]=='x' && board[1][2]=='x' && board[2][1]=='x' && board[3][0]=='x') return 'x';
    if(board[0][3]=='o' && board[1][2]=='o' && board[2][1]=='o' && board[3][0]=='x') return 'o';
    if(board[1][3]=='x' && board[2][2]=='x' && board[3][1]=='x' && (board[4][0]=='x' || board[0][4]=='x')) return 'x';
    if(board[1][3]=='o' && board[2][2]=='o' && board[3][1]=='o' && (board[4][0]=='o' || board[0][4]=='o')) return 'o';
    if(board[5][2]=='x' && board[4][3]=='x' && board[3][4]=='x' && board[2][5]=='x') return 'x';
    if(board[5][2]=='o' && board[4][3]=='o' && board[3][4]=='o' && board[2][5]=='x') return 'o';
    if(board[4][2]=='x' && board[3][3]=='x' && board[2][4]=='x' && (board[5][1]=='x' || board[1][5]=='x')) return 'x';
    if(board[4][2]=='o' && board[3][3]=='o' && board[2][4]=='o' && (board[4][1]=='o' || board[1][5]=='o')) return 'o';
    
    if(board[3][2]=='x' && board[2][3]=='x' && 
       ((board[4][1]=='x' && board[5][0]=='x') || (board[1][4]=='x' && board[0][5]=='x') || (board[1][4]=='x' && board[4][1]=='x'))) return 'x';
    if(board[3][2]=='o' && board[2][3]=='o' && 
       ((board[4][1]=='o' && board[5][0]=='o') || (board[1][4]=='o' && board[0][5]=='o') || (board[1][4]=='o' && board[4][1]=='o'))) return 'o'; 
    return ' '; 
  }
  
  public static void play(){
    System.out.println("What is player 1's name?");
    Scanner input = new Scanner(System.in);
    String name = input.nextLine();
    System.out.println("What is player 2's name?");
    input = new Scanner(System.in);
    String name2 = input.nextLine();
    int counter = 0;
    char[][] board = makeBoard(6);
    Random toss = new Random();
    int a= toss.nextInt(99);
    if(a%2 == 1){
      System.out.println("Result of cointoss: " + name + " get the first move");
    }
    else{
      System.out.println("Result of cointoss: " + name2 + " get the first move");
      getUserMove(board, 2);
      displayBoard(board);
      counter++;
    }
    while(checkForWinner(board)==' ' || counter < board.length*board.length){
      System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      getUserMove(board, 1);
      counter++;
      displayBoard(board);
      if(checkForWinner(board) == 'x'){
        System.out.println(name + " won!");
        break;
      }
      if(counter == board.length*board.length){
        System.out.println("No winner, board is full");
        break;
      }
      System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      
      System.out.println(name2 + "'s turn");
      counter++;
      getUserMove(board,2);
      displayBoard(board);
      if(checkForWinner(board)=='o'){
        System.out.println(name2 + " won!");
        break;
      }
      if(counter == board.length*board.length){
        System.out.println("No winner, board is full");
        break;
      }
    }
  }
}
